---
# tasks file for ansible-role-postgres

- name: Ensure db client packages are installed (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - postgresql
      - libpq-dev
      - python3-psycopg2
    state: present
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: Ensure hosts system-postgres is stopped and disabled
  ansible.builtin.systemd:
    name: system-postgresql.slice
    state: stopped
    enabled: no
  when: postgres_system_postgres_disable
  notify:
    - restart postgres

- name: Ensure PostgreSQL image is pulled
  community.docker.docker_image:
    name: "{{ postgres_docker_image }}"
    tag: "{{ postgres_docker_image_tag }}"
    source: pull

- name: Ensure data container is created
  community.docker.docker_container:
    name: "{{ postgres_container_name }}-{{ postgres_major_version }}-data"
    image: "{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}"
    pull: "{{ postgres_upgrade | default(false) | bool }}"
    container_default_behavior: no_defaults
    state: present
  notify:
    - restart postgres

- name: Ensure PostgreSQL container runs
  community.docker.docker_container:
    name: "{{ postgres_container_name }}"
    image: "{{ postgres_docker_image }}:{{ postgres_docker_image_tag }}"
    restart_policy: always
    state: started
    # restart: yes
    # memory: "{{ opstgres_container_memory_limit | default(omit) }}"
    volumes:
      - "{{ postgres_container_name }}-{{ postgres_major_version }}-data:/var/lib/postgresql/data"
    volumes_from:
      - "{{ postgres_container_name }}-{{ postgres_major_version }}-data"
    ports:
      - "{{ postgres_port }}:5432"
    env:
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      PGDATA: /var/lib/postgresql/data/pgdata
    shm_size: 256M
    container_default_behavior: no_defaults
    networks: "{{ postgres_networks }}"
    networks_cli_compatible: yes
    network_mode: default
  when: postgres_password is defined
  notify:
    - restart postgres

- name: Ensure PostgreSQL is restarted (if required)
  ansible.builtin.meta: flush_handlers

- name: Ensure roles are created.
  ansible.builtin.include_tasks: create_roles.yml
  with_items: "{{ postgres_roles }}"
  loop_control:
    loop_var: outer_item
  when: postgres_roles is defined

- name: Ensure databases are created.
  ansible.builtin.include_tasks: create_databases.yml
  with_items: "{{ postgres_databases }}"
  loop_control:
    loop_var: outer_item
  when: postgres_databases is defined

- name: Ensure postgres is tuned
  ansible.builtin.include_tasks: tune.yml
  when: postgres_tune is defined
